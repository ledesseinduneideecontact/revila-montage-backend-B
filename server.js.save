const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const path = require('path');
const fs = require('fs').promises;
const http = require('http');
const socketIO = require('socket.io');
require('dotenv').config();

const uploadRoutes = require('./src/routes/upload');
const generateRoutes = require('./src/routes/generate');
const downloadRoutes = require('./src/routes/download');
const storageManager = require('./src/services/storageManager');

const app = express();
const server = http.createServer(app);
const io = socketIO(server, {
  cors: {
    origin: process.env.FRONTEND_URL || ['http://localhost:5173', 'http://localhost:5174', 'http://localhost:5175', 'http://localhost:5176'],
    methods: ['GET', 'POST'],
    credentials: true
  }
});

const PORT = process.env.PORT || 8080;

app.use(cors({
  origin: process.env.FRONTEND_URL || ['http://localhost:5173', 'http://localhost:5174', 'http://localhost:5175', 'http://localhost:5176'],
  credentials: true
}));
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

async function ensureDirectories() {
  const dirs = ['uploads', 'outputs', 'assets/music'];
  for (const dir of dirs) {
    await fs.mkdir(path.join(__dirname, dir), { recursive: true });
  }
}

app.set('io', io);

app.use('/api/upload', uploadRoutes);
app.use('/api/generate', generateRoutes);
app.use('/api/download', downloadRoutes);

app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/outputs', express.static(path.join(__dirname, 'outputs')));

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Memories Maker API is running' });
});

app.use((req, res, next) => {
  res.status(404).json({ error: 'Route not found' });
});

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({
    error: err.message || 'Internal server error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

io.on('connection', (socket) => {
  console.log('New client connected:', socket.id);
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

async function startServer() {
  try {
    await ensureDirectories();
    
    storageManager.startCleanupScheduler();
    
    server.listen(PORT, () => {
      console.log(`✨ Memories Maker Backend running on port ${PORT}`);
      console.log(`📁 Upload directory: ${path.join(__dirname, 'uploads')}`);
      console.log(`🎬 Output directory: ${path.join(__dirname, 'outputs')}`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

startServer();

process.on('SIGINT', async () => {
  console.log('\n🛑 Shutting down gracefully...');
  await storageManager.cleanup();
  process.exit(0);
});
